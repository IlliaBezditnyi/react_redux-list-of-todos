{"version":3,"sources":["store/index.ts","api/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["LOAD_TODOS","LOAD_USER","DELETE_TODO","setTodos","state","todos","setUser","user","initialState","store","createStore","action","type","payload","filter","todo","id","URL","getTodos","a","fetch","response","json","getUsers","userId","Filter","TodoList","selectUser","useState","query","setQuery","All","filterStatus","setFilterStatus","preparedTodos","todosFilteredByTitle","title","toLowerCase","includes","Active","completed","Completed","filteredTodos","dispatch","useDispatch","removeTodo","className","value","onChange","event","target","map","classnames","readOnly","onClick","CurrentUser","useSelector","request","userFromServer","useEffect","name","email","App","todosFromServer","selectedUserId","setSelectedUserId","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.edf76c3e.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { Todo } from '../types/Todo';\nimport { User } from '../types/User';\n\nconst LOAD_TODOS = 'LOAD_TODOS';\nconst LOAD_USER = 'LOAD_USER';\nconst DELETE_TODO = 'DELETE_TODO';\n\nexport const loadTodos\n= (payload: Todo[]) => ({ type: LOAD_TODOS, payload });\nexport const loadUser = (payload: User) => ({ type: LOAD_USER, payload });\nexport const deleteTodo = (payload: number) => ({ type: DELETE_TODO, payload });\n\nexport const setTodos = (state: RootState) => state.todos;\nexport const setUser = (state: RootState) => state.user;\nexport const removeTodo = (state: RootState) => state.todos;\n\nexport type RootState = {\n  todos: Todo[],\n  user: User | null,\n};\n\nconst initialState: RootState = {\n  todos: [],\n  user: null,\n};\n\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case LOAD_TODOS:\n      return { ...state, todos: [...action.payload] };\n\n    case LOAD_USER:\n      return { ...state, user: action.payload };\n\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.payload),\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  rootReducer,\n);\n\nexport default store;\n","const URL = 'https://mate.academy/students-api';\n\nexport async function getTodos() {\n  const response = await fetch(`${URL}/todos`);\n\n  return response.json();\n}\n\nexport async function getUsers(userId: number) {\n  const response = await fetch(`${URL}/users/${userId}`);\n\n  return response.json();\n}\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport classnames from 'classnames';\nimport { deleteTodo } from '../../store';\nimport { Todo } from '../../types/Todo';\n\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[];\n  selectUser: (id: number) => void;\n};\n\nenum Filter {\n  All = 'All',\n  Active = 'Active',\n  Completed = 'Completed',\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectUser,\n}) => {\n  const [query, setQuery] = useState('');\n  const [filterStatus, setFilterStatus] = useState(`${Filter.All}`);\n\n  const filteredByTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const changedFilterStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setFilterStatus(event.target.value);\n  };\n\n  const filteredTodos = () => {\n    const todosFilteredByTitle = todos.filter(({ title }) => {\n      const titleLowerCase = title.toLowerCase();\n\n      return titleLowerCase.includes(query.toLowerCase());\n    });\n\n    switch (filterStatus) {\n      case Filter.Active:\n        return todosFilteredByTitle.filter(\n          ({ completed }) => !completed,\n        );\n\n      case Filter.Completed:\n        return todosFilteredByTitle.filter(\n          ({ completed }) => completed,\n        );\n\n      default:\n        return todosFilteredByTitle;\n    }\n  };\n\n  const preparedTodos = filteredTodos();\n\n  const dispatch = useDispatch();\n\n  const removeTodo = (id: number) => {\n    dispatch(deleteTodo(id));\n  };\n\n  return (\n    <div className=\"todoList\">\n      <h2 className=\"todoList__title\">\n        Todos:\n      </h2>\n      <div className=\"todoList__navigation\">\n        <h3>\n          Filter:\n        </h3>\n\n        <label>\n          <input\n            className=\"todoList__navigationInput\"\n            type=\"text\"\n            value={query}\n            onChange={filteredByTitle}\n          />\n        </label>\n\n        <h3>\n          Select status:\n        </h3>\n        <select\n          value={filterStatus}\n          onChange={changedFilterStatus}\n        >\n          <option>All</option>\n          <option>Active</option>\n          <option>Completed</option>\n        </select>\n      </div>\n\n      <div className=\"todoList__list-container\">\n        <ul className=\"todoList__list\">\n          {preparedTodos.map(({\n            userId,\n            id,\n            title,\n            completed,\n          }) => (\n            <li\n              className={classnames(\n                'todoList__item',\n                { 'todoList__item--checked': completed },\n                { 'todoList__item--unchecked': !completed },\n              )}\n              key={id}\n            >\n              <label>\n                <input type=\"checkbox\" readOnly />\n                <p>{title}</p>\n              </label>\n\n              <div className=\"todoList__actions\">\n                <button\n                  type=\"button\"\n                  className=\"todoList__button\"\n                  onClick={() => selectUser(userId)}\n                >\n                  {`User ${userId}`}\n                </button>\n\n                <button\n                  type=\"button\"\n                  className=\"todoList__button\"\n                  onClick={() => removeTodo(id)}\n                >\n                  ‚ùå\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadUser, setUser } from '../../store';\n\nimport { getUsers } from '../../api/api';\n\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number;\n  selectUser: (id: number) => void;\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, selectUser }) => {\n  const dispatch = useDispatch();\n  const user = useSelector(setUser);\n\n  const request = async () => {\n    const userFromServer = await getUsers(userId);\n\n    dispatch(loadUser(userFromServer));\n  };\n\n  useEffect(() => {\n    request();\n  }, [userId]);\n\n  return (\n    <>\n      {user && (\n        <div className=\"currentUser\">\n          <h2 className=\"currentUser__title\">\n            <span>\n              {`Selected user: ${user.id}`}\n            </span>\n          </h2>\n\n          <h3 className=\"currentUser__name\">\n            {user.name}\n          </h3>\n\n          <p className=\"currentUser__email\">\n            {user.email}\n          </p>\n\n          <button\n            type=\"button\"\n            className=\"currentUser__clearButton\"\n            onClick={() => selectUser(0)}\n          >\n            Remove\n          </button>\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadTodos, setTodos } from './store';\nimport { getTodos } from './api/api';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\n\nimport './App.scss';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(setTodos);\n\n  const request = async () => {\n    const todosFromServer = await getTodos();\n\n    dispatch(loadTodos(todosFromServer));\n  };\n\n  useEffect(() => {\n    request();\n  }, []);\n\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const selectUser = (userId: number) => {\n    setSelectedUserId(userId);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__sidebar\">\n        <TodoList\n          todos={todos}\n          selectUser={selectUser}\n        />\n      </div>\n\n      <div className=\"app__content\">\n        <div className=\"app__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              selectUser={selectUser}\n            />\n          ) : 'No user'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}